<?xml version="1.0" encoding="UTF-8" ?>
<dataConfig>
    <dataSource name="KuorumMongo" type="MongoDataSource" database="Kuorum" host="localhost" port="27017"/>
    <propertyWriter dateFormat="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" type="SimplePropertiesWriter" />

    <document name="kuorum">

        <entity name="kuorumUser"
                processor="MongoEntityProcessor"
                query="{'authorities.authority':{$ne:'ROLE_INCOMPLETE_USER'}}"
		deltaImportQuery="{'_id':{$oid:'${dih.delta._id}'}}"
                deltaQuery="{lastUpdated:{$gt:{$date:'${dih.last_index_time}'}}} "
                collection="kuorumUser"
                datasource="KuorumMongo"
                transformer="script:transformKuorumUser" >
        </entity>

        <entity name="project"
                processor="MongoEntityProcessor"
                query="{published:true}"
		deltaImportQuery="{'_id':{$oid:'${dih.delta._id}'}}"
                deltaQuery="{lastUpdated:{$gt:{$date:'${dih.last_index_time}'}}} "
                collection="project"
                datasource="KuorumMongo"
                transformer="script:transformProject" >
        </entity>

        <entity name="post"
                processor="MongoEntityProcessor"
                query="{published:true}"
		deltaImportQuery="{'_id':{$oid:'${dih.delta._id}'}}"
                deltaQuery="{lastUpdated:{$gt:{$date:'${dih.last_index_time}'}}} "
                collection="post"
                datasource="KuorumMongo"
                transformer="script:transformPost" >
        </entity>
    </document>

<script><![CDATA[
        function transformKuorumUser(row){
            row.put('id', row.get('_id'));
            row.put('name', row.get('name'));
            row.put('type', getType(row));
            row.put('subType', row.get('userType'));
            row.put('dateCreated', row.get('dateCreated'));
            row.put('commissions', row.get('relevantCommissions'));
	    getTags(row);
            getRegionNameFromUser(row);
            getAvatar(row);
            getRole(row);
            getGender(row);
            row.put('text', row.get('bio'));
            row.put('kuorumRelevance', row.get('relevance')); //TODO: Recover from other collection
            row.put('numberPeopleInterestedFor', 100); //TODO: recover from other collection
            return row;
        }

	function getType(kuorumUser){
	    var type = "KUORUM_USER";
            if (kuorumUser.get('userType')=="POLITICIAN"){
                type = "POLITICIAN";
            }
	    return type;
	}

	function getTags(kuorumUser){
		if (kuorumUser.get('ideology') !=null && kuorumUser.get('ideology').get('supportedCauses')){
			kuorumUser.put('tags',kuorumUser.get('ideology').get('supportedCauses'))
		}else{
			kuorumUser.put('tags',[])
		}
	}

        function getRole(kuorumUser){
            if (kuorumUser.get('gamification') != null && kuorumUser.get('gamification').get('activeRole')!= null){
                kuorumUser.put('role',kuorumUser.get('gamification').get('activeRole'))
            }else{
                kuorumUser.put('role','ROLE_DEFAULT')
            }
        }
        function getGender(kuorumUser){
            if (kuorumUser.get('personalData') != null && kuorumUser.get('personalData').get('gender') != null){
                kuorumUser.put("gender", kuorumUser.get('personalData').get('gender'));
            }else{
                kuorumUser.put("gender", "FEMALE");
            }
        }

        function getAvatar(kuorumUser){
            if (kuorumUser.get('avatar') != null){
                kuorumUser.put("urlImage",kuorumUser.get('avatar').get('url'));
            }
        }
	function getRegionNameFromUser(kuorumUser){
		var regionName ="";
		var regionIso = "";
		var postalCode = "";
		var regionIso3166_2Length = 0;
		if (kuorumUser.get('personalData') == null || kuorumUser.get('personalData').get('province') == null){
            //Usuarios de antigua web que se indexen
            regionName = "EspaÃ±a"
            regionIso = "EU-ES"
            postalCode = "00000"
	    regionIso3166_2Length = 5
        }else{
            regionName = kuorumUser.get('personalData').get('province')
            regionIso = kuorumUser.get('personalData').get('provinceCode')
            postalCode = kuorumUser.get('personalData').get('postalCode')
	    regionIso3166_2Length = regionIso.length()
        }

		if (kuorumUser.get('professionalDetails') != null && kuorumUser.get('professionalDetails').get('region') != null){
            regionName = kuorumUser.get('professionalDetails').get('region').get('name')
            regionIso = kuorumUser.get('professionalDetails').get('region').get('iso3166_2')
	    regionIso3166_2Length = regionIso.length()
        }
 		kuorumUser.put('regionName', regionName);
		kuorumUser.put('regionIso3166_2', regionIso);
		kuorumUser.put('regionIso3166_2Length', regionIso3166_2Length);
		kuorumUser.put('postalCode', postalCode);
	}

	function transformProject(project){
        project.put('id',project.get('_id'));
        project.put('name',project.get('shortName'));
        project.put('type','PROJECT');
		project.put('subType',project.get('status')?'OPEN':'APPROVED'); //TODO: APPROVED is not correct
		project.put('text',project.get('description'));
		project.put('dateCreated',project.get('dateCreated'));
		project.put('tags',[project.get('hashtag')]);
		project.put('hashtag',project.get('hashtag'));
		project.put('commissions',project.get('commissions'));
		project.put('regionName', project.get('region').get('name'));
		project.put('regionIso3166_2', project.get('region').get('iso3166_2'));
		project.put('urlImage', project.get('image')?project.get('image').get('url'):'');
		project.put('ownerId',project.get('owner')); // first ownerId because owner field is overwritten
		project.put('owner',project.get('indexMetaData').get('ownerName'));
		project.put('relevance', project.get('relevance'));
		project.put('deadLine',project.get('deadline'));
		project.put('kuorumRelevance', 0);
		project.put('numberPeopleInterestedFor', project.get('peopleVotes').get('total'));
		project.put('regionIso3166_2Length',project.get('region').get('iso3166_2').length());
		return project;
	}

	function transformPost(post){
	       	post.put('id',post.get('_id'));
        	post.put('name',post.get('title'));
	       	post.put('type','POST');
		post.put('text',post.get('text'));
		post.put('dateCreated',post.get('dateCreated'));
		post.put('tags',[post.get('indexMetaData').get('hashtag')]);
		post.put('hashtagProject',post.get('indexMetaData').get('hashtag'));
		post.put('commissions',post.get('indexMetaData').get('commissions'));
		post.put('victory',post.get('victory'));
		post.put('regionName', post.get('indexMetaData').get('regionName'));
		post.put('regionIso3166_2', post.get('indexMetaData').get('regionIso3166_2'));
		post.put('regionIso3166_2Length',post.get('indexMetaData').get('regionIso3166_2').length());
		post.put('urlImage', post.get('multimedia')?post.get('multimedia').get('url'):'');
		post.put('ownerId',post.get('owner')); // first ownerId because owner field is overwritten
		post.put('owner',post.get('indexMetaData').get('ownerName'));
		post.put('relevance', 0);
		post.put('deadLine',post.get('deadline'));
		post.put('kuorumRelevance', 0);
		post.put('numberPeopleInterestedFor', post.get('numVotes'));
		return post;
	}
        ]]></script>
</dataConfig>
